name: 'Docusaurus CI/CD'

on:
  pull_request:
    branches: ['main']
    paths:
      [
        'docs/**',
        'blog/**',
        'src/**',
        'static/**',
        '**/*.js',
        'package.json',
        'yarn.lock',
      ]

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

jobs:
  build-and-serve:
    name: Test
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install Dependencies
        run: |
          install_before_time=$(date +%s.%N)
          yarn install --frozen-lockfile
          install_after_time=$(date +%s.%N)
          install_time=$(python -c "print($install_after_time - $install_before_time)")
          echo "installTime=$install_time" >> $GITHUB_ENV

      - name: Build Website
        run: |
          before_time=$(date +%s.%N)
          yarn build
          after_time=$(date +%s.%N)
          build_time=$(python -c "print($after_time - $before_time)")
          echo "buildTime=$build_time" >> $GITHUB_ENV

      - name: Verify Build Output
        run: |
          if [ -d "build" ]; then
            echo "Build successful"
          else
            echo "Build failed"
            exit 1
          fi

      - name: Test Server Functionality
        run: |
          yarn serve &
          sleep 5
          kill %1

      - name: Comment on Pull Request
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN_GITHUB }}
          script: |
            const installTime = process.env.installTime;
            const buildTime = process.env.buildTime;
            const table = `
              | Step                 | Time (seconds) |
              |----------------------|----------------|
              | Install Dependencies | ${installTime} |
              | Build Website        | ${buildTime}   |
            `;
            const header = `## Performance Report\n- Run number: ${process.env.GITHUB_RUN_NUMBER} \n - Run ID: ${process.env.GITHUB_RUN_ID} \n - Run URL: ${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}\n - âœ… Test server functionality passed with the following times for each step:\n`;
            const commentBody = `${header}\n\n${table}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

  # Cleanup old comments made by the bot, only keep the most recent
  cleanup-comments:
    name: cleanup old bot's comments
    runs-on: ubuntu-24.04
    needs: build-and-serve
    steps:
      - name: Remove old bot comments
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            // Filter comments made by github-actions[bot]
            const botComments = comments.filter(
              (comment) => comment.user.login === 'ubunchuu[bot]'
            );

            // Sort comments by creation date in descending order
            botComments.sort(
              (a, b) => new Date(b.created_at) - new Date(a.created_at)
            );

            // Determine the comments to delete (all except the most recent)
            const commentsToDelete = botComments.slice(1);

            // Delete the older comments
            for (const comment of commentsToDelete) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
              });
            }
